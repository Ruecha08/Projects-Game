using UnityEngine;
using UnityEngine.UI; // For the Slider UI component

public class Health : MonoBehaviour
{
Â  Â  public float maxHealth = 100f; // ðŸŽ¯ Changed to float for more versatile damage
Â  Â  public float currentHealth;

Â  Â  // Optional references to UI and Animator
Â  Â  public Slider healthBarSlider; // Drag the health bar UI Slider here
Â  Â  private Animator animator; // Will be automatically found on the GameObject

Â  Â  void Awake()
Â  Â  {
Â  Â  Â  Â  // Get the Animator component on this GameObject
Â  Â  Â  Â  animator = GetComponent<Animator>();
Â  Â  }

Â  Â  void Start()
Â  Â  {
Â  Â  Â  Â  currentHealth = maxHealth;
Â  Â  Â  Â  UpdateHealthBar();
Â  Â  }
Â  Â  
Â  Â  public void TakeDamage(float damage) // ðŸŽ¯ Changed to float
Â  Â  {
        // Play Hit animation if not already at zero health
Â  Â  Â  Â  if (currentHealth > 0)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  if (animator != null)
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  animator.SetTrigger("Hit");
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  currentHealth -= damage;
Â  Â  Â  Â  // Use Mathf.Max to clamp health at 0
Â  Â  Â  Â  currentHealth = Mathf.Max(currentHealth, 0); 
Â  Â  Â  Â  
Â  Â  Â  Â  UpdateHealthBar(); 
Â  Â  Â  Â  
Â  Â  Â  Â  if (currentHealth <= 0)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Die();
Â  Â  Â  Â  }
Â  Â  }
    
    // You can add a Heal method too if needed
    public void Heal(float amount)
    {
        currentHealth += amount;
        currentHealth = Mathf.Min(currentHealth, maxHealth);
        UpdateHealthBar();
    }

Â  Â  public void UpdateHealthBar()
Â  Â  {
Â  Â  Â  Â  if (healthBarSlider != null)
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  healthBarSlider.maxValue = maxHealth;
Â  Â  Â  Â  Â  Â  healthBarSlider.value = currentHealth;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  void Die()
Â  Â  {
Â  Â  Â  Â  Debug.Log(gameObject.name + " is dead!");
Â  Â  Â  Â  Destroy(gameObject);
Â  Â  }
}